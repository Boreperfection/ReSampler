/*
* Copyright (C) 2016 - 2017 Judd Niemann - All Rights Reserved
* You may use, distribute and modify this code under the
* terms of the GNU Lesser General Public License, version 2.1
*
* You should have received a copy of GNU Lesser General Public License v2.1
* with this file. If not, please refer to: https://github.com/jniemann66/ReSampler
*/

#ifndef NOISESHAPE_H
#define NOISESHAPE_H 1

// noiseshape.h : contains filter coefficients for noise shaping

//////////////////////////
//
// Filter Coefficients
//
//////////////////////////

const double noiseShaperPassThrough[1] = {
	1
};

// filters based on E-weighted curves
// from 'Minimally Audible Noise Shaping' (*)

const double modew44[] = { // Modified E-weighted (appendix: 2)
	1.6620, -1.2630, 0.4827,
	-0.2913, 0.1268,-0.1124,
	0.03252, -0.01265, -0.03524
};

const double lips44[] = { // improved E-weighted (appendix: 5)
	2.033, -2.165, 1.959,
	-1.590, 0.6149
};

const double impew44[] = { // improved E-weighted 9 coeff (appendix: 6)
	2.847, -4.685,  6.214,
	-7.184, 6.639, -5.032,
	3.263, -1.632, 0.4191
};

// filters based on F-weighted curves
// from 'Psychoacoustically Optimal Noise Shaping' (**)
// this filter is the "F-Weighted" noise filter described by Wannamaker
// It is designed to produce minimum audibility:

const double wan3[] = { // Table 3; 3 Coefficients
	1.623, -0.982, 0.109
};

const double wan9[] = { // Table 3; 9 Coefficients ('f-weighted' in SoX)
	2.4120002321781  , -3.370000324394779,  3.937000378973959,
	-4.174000401787478,  3.353000322758366, -2.205000212252369,
	1.281000123308519, -0.569000054771701,  0.084700008153185
};

const double wan24[] = { // Table 4; 24 Coefficients
	2.391510032751124, -3.284444044979632,  3.679506050389904,
	-3.635044049781009,  2.524185034568077, -1.146701015703782,
	0.115354001579743,  0.51374500703561 , -0.749277010261162,
	0.512386007016999, -0.188997002588268, -0.043705000598528,
	0.149843002052063, -0.151186002070453,  0.076302001044937,
	-0.012070000165296, -0.021127000289329,  0.025232000345547,
	-0.016121000220773,  0.004453000060982,  0.000876000011999,
	-0.001799000024635,  0.0007740000106  , -0.000128000001755
};

const double highShib44[20] = { // High-Shibata 44k (20 taps)

	3.0259189605712890625, -6.0268716812133789062,   9.195003509521484375,
	-11.824929237365722656, 12.767142295837402344, -11.917946815490722656,
	9.1739168167114257812,  -5.3712320327758789062, 1.1393624544143676758,
	2.4484779834747314453,  -4.9719839096069335938,   6.0392003059387207031,
	-5.9359521865844726562,  4.903278350830078125,   -3.5527443885803222656,
	2.1909697055816650391, -1.1672389507293701172,  0.4903914332389831543,
	-0.16519790887832641602,  0.023217858746647834778

};

const double experimental1[12] = {

	2.364886347215289, -3.988959929925308,
	4.902822209912312, -4.843648252122195,  3.725907788181863,
	-2.522484971272994,  1.500972764192065, -0.913370707104862,
	0.467754159082863, -0.217775319588043,  0.06233452162878 ,
	-0.008210122419399
};

const double experimental2[12] = {

	3.21095248936233 ,  -6.406867167012604,
	9.15211186437126 , -10.079104063889838,   8.537331147534738,
	-5.615754800644309,   2.69872424169395 ,  -0.898522709412302,
	0.144744529232516,  -0.000941639434677,  -0.001607880972407,
	-0.00032034775916
};

const double std_44[10] = {
	2.1458349310385, -2.8886247979953, 3.1440240984815,
	-2.7691389969061,  1.8410749156878, -1.03787966035156,
	0.45566921793679, -0.12410827054639,  0.013088865078523,
	-0.002197012454707
};

const double smooth_44[10] = {
	2.72197929744    , -4.4263502477402  ,
	4.890560226081401, -4.1125718817456  ,  2.6028230417488  ,
	-1.3453995960626  ,  0.51267887999822 , -0.17446352557998 ,
	0.02556094877479 , -0.008731018602922
};

const double notch12250_1_44[12] = { // 12.25khz deep notch, 28dB top-end
	2.364886347215289, -3.988959929925308,
	4.902822209912312, -4.843648252122195,  3.725907788181863,
	-2.522484971272994,  1.500972764192065, -0.913370707104862,
	0.467754159082863, -0.217775319588043,  0.06233452162878 ,
	-0.008210122419399
};

const double notch12250_2_44[12] = { // 12.25khz deep notch, 32dB top-end (works well with flatTDPF)
	3.21095248936233 ,  -6.406867167012604,
	9.15211186437126 , -10.079104063889838,   8.537331147534738,
	-5.615754800644309,   2.69872424169395 ,  -0.898522709412302,
	0.144744529232516,  -0.000941639434677,  -0.001607880972407,
	-0.00032034775916
};

#endif
